name: Build App on Self-Hosted Runners

on:
  push:
    tags:
      - '*' # 仅在版本标签推送时触发

env:
  CI_COMMIT_TAG: "${{ github.ref_name }}"
  MAC_FILE_NAME: "oadin-installer-${{ github.ref_name }}.pkg"
  WIN_FILE_NAME: "oadin-installer-${{ github.ref_name }}.exe"
  NEXUS_HOST_PORT: ${{ secrets.NEXUS_HOST_PORT }}
  NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
  NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

jobs:
  build-mac:
    name: Build macOS App
    runs-on: [ self-hosted, macOS, ARM64 ] # 匹配 aiwenxuedeMac-mini
    steps:
      - name: Set ENV based on tag
        run: |
          if [[ "${{ github.ref_name }}" == test* ]]; then
            echo "ENV=development" >> $GITHUB_ENV
          else
            echo "ENV=production" >> $GITHUB_ENV
          fi
      - name: Run build script on Mac
        run: |
          echo "$ENV"
          echo "========== 🔧 Mac Build Begin =========="
          echo "--------- 🧹 清除旧文件 准备纯净环境 ----------"
          cd /Users/dcone/WebstormProjects/oadin/
          git reset --hard
          git clean -fd
          echo "--------- 🔖 拉取代码准备构建 ----------"
          git fetch
          echo $CI_COMMIT_TAG ; git checkout $CI_COMMIT_TAG
          echo "--------- 🛠️ 制品构建与签名 ----------"
          go mod tidy
          echo "$ENV active"
          
          # 构建主程序
          CGO_ENABLED=1 CGO_CFLAGS="-I$PWD\internal\datastore\sqlite\sqlite-vec" GOOS=darwin GOARCH=arm64  go build -o oadin -tags "$ENV" -ldflags="-s -w"  cmd/cli/main.go
          
          # 🔥 添加：构建托盘程序
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -o oadin-tray trayapp/main.go
          
          # 验证文件存在
          if [ ! -f "oadin" ]; then
              echo "❌ oadin not found"
              exit 1
          fi
          if [ ! -f "oadin-tray" ]; then
              echo "❌ oadin-tray not found"
              exit 1
          fi
          echo "✅ Both oadin and oadin-tray built successfully"
          
          # 签名主程序
          codesign --verbose --force  --timestamp --options=runtime --sign "Developer ID Application: Digital China (China) Limited (US7ZG73N89)" oadin
          
          # 签名托盘程序
          codesign --verbose --force  --timestamp --options=runtime --sign "Developer ID Application: Digital China (China) Limited (US7ZG73N89)" oadin-tray
          
          echo "--------- 📦 安装包构建与签名 ----------"
          mkdir -p pkgroot/oadin
          mv oadin pkgroot/oadin/oadin
          mv oadin-tray pkgroot/oadin/oadin-tray
          chmod +x installer/mac/preinstall
          chmod +x installer/mac/postinstall
          pkgbuild --identifier com.digitalchina.oadin --version "${CI_COMMIT_TAG}" --install-location /Users/Shared/Oadin --sign "Developer ID Installer: Digital China (China) Limited (US7ZG73N89)" --root pkgroot/Oadin --scripts ./installer/mac oadin.pkg
          echo "--------- 📬 安装包公证 ----------"
          xcrun notarytool store-credentials "ci-profile" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID"  --password "$APPLE_APP_SPECIFIC_PASSWORD"
          xcrun notarytool submit oadin.pkg --keychain-profile "ci-profile" --wait
          echo "--------- 📎 附加公证票据 ----------"
          xcrun stapler staple oadin.pkg
          echo "--------- 🔎️ 验签 ----------"
          spctl --assess --type install --verbose=4 oadin.pkg
          echo "--------- 📁 移动到待上传文件夹 ----------"
          mkdir -p upload
          mv oadin.pkg upload/${MAC_FILE_NAME}
          echo "========== 🔧 Mac Build End =========="
      - name: upload nexus
        if: startsWith(github.ref_name, 'test')
        run: |
          echo "========== 🔧 Mac Upload Begin =========="
          echo "-------- 📤 上传到 Nexus 私服 --------"
          curl -v -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --upload-file "/Users/dcone/WebstormProjects/oadin/upload/${MAC_FILE_NAME}" "http://${NEXUS_HOST_PORT}/repository/raw-hosted/intel-ai-pc/oadin/releases/mac/${MAC_FILE_NAME}"
          curl -v -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --upload-file "/Users/dcone/WebstormProjects/oadin/upload/${MAC_FILE_NAME}" "http://${NEXUS_HOST_PORT}/repository/raw-hosted/intel-ai-pc/oadin/releases/mac/oadin-installer-latest.pkg"
          echo "--------- 🧹 环境清理 ----------"
          cd /Users/dcone/WebstormProjects/oadin
          git reset --hard
          git clean -fd
          echo "--------- 🗑️ 删除本地tag ----------"
          git checkout main
          git tag -d $CI_COMMIT_TAG
          echo "========== 🔧 Mac Upload End =========="
      - name: upload oss
        if: ${{ !startsWith(github.ref_name, 'test') }}
        run: |
          echo "========== 🔧 Mac Upload Begin =========="
          echo "-------- 📤 上传到 阿里云 OSS --------"
          cd /Users/dcone/WebstormProjects/oadin/upload
          ossutil cp "${MAC_FILE_NAME}" "oss://smartvision-aipc/oadin/releases/macos/${MAC_FILE_NAME}" --force
          ossutil cp "${MAC_FILE_NAME}" "oss://smartvision-aipc/oadin/releases/macos/oadin-installer-latest.pkg" --force
          echo "--------- 🧹 环境清理 ----------"
          git reset --hard
          git clean -fd
          echo "--------- 🗑️ 删除本地tag ----------"
          git checkout main
          git tag -d $CI_COMMIT_TAG
          echo "--------- ♻️ 刷新CND ----------"
          aliyun cdn RefreshObjectCaches --ObjectPath "https://oss-aipc.dcclouds.com/oadin/releases/macos/oadin-installer-latest.pkg" --ObjectType File
          echo "========== 🔧 Mac Upload End =========="

  build-win:
    name: Build Windows App
    runs-on: [ self-hosted, Windows, X64 ] # 匹配 WIN-P1B0AOCK993
    steps:
      - name: Set ENV based on tag
        shell: powershell
        run: |
          if ("${{ github.ref_name }}" -like "test*") {
            "ENV=development" >> $env:GITHUB_ENV
          } else {
            "ENV=production" >> $env:GITHUB_ENV
          }
      - name: Run build script on Windows
        run: |
          echo "========== 🔧 Win Build Begin =========="
          echo "--------- 🧹 清除旧文件 准备纯净环境 ----------"
          cd C:\Users\Administrator\WebstormProjects\oadin
          git reset --hard
          git clean -fd
          echo "--------- 🔖 拉取代码准备构建 ----------"
          git fetch
          echo $env:CI_COMMIT_TAG ; git checkout $env:CI_COMMIT_TAG
          echo "--------- 🛠️ 制品构建与签名 ----------"
          go mod tidy
          $env:CGO_ENABLED=1
          $env:GOOS="windows"
          $env:GOARCH="amd64"
          $env:CGO_CFLAGS="-I$PWD\internal\datastore\sqlite\sqlite-vec"
          
          # 构建主程序
          go build -o oadin.exe -tags "$env:ENV" -ldflags="-s -w" cmd/cli/main.go
          
          # 🔥 关键添加：构建托盘程序
          go build -o oadin-tray.exe trayapp/main.go
          
          # 为托盘程序添加图标
          if (Test-Path "trayapp/icon.syso") {
              Write-Host "✅ Found Windows icon resource"
          } else {
              Write-Host "⚠️ Windows icon resource not found, skipping icon embedding"
          }
          
          # 验证文件存在
          if (-not (Test-Path "oadin.exe")) { 
              Write-Error "❌ oadin.exe not found" 
              exit 1 
          }
          if (-not (Test-Path "oadin-tray.exe")) { 
              Write-Error "❌ oadin-tray.exe not found" 
              exit 1 
          }
          Write-Host "✅ Both oadin.exe and oadin-tray.exe built successfully"
          
          # 签名主程序
          signtool sign /f C:\Users\Administrator\Desktop\u.cer /tr http://timestamp.digicert.com /td sha256 /fd sha256 /csp "eToken Base Cryptographic Provider" /k "[{{$($WIN_SIGN_PASSWORD)}}]=p11#942acfc7f5754f2e" "oadin.exe"
          
          echo "--------- 📦 安装包构建与签名 ----------"
          
          # 显示当前目录和文件信息用于调试
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Files in root directory:"
          Get-ChildItem -Name "*.exe" | ForEach-Object { Write-Host "  $_" }
          
          # 验证 installer\win 目录存在
          if (-not (Test-Path "installer\win")) {
              Write-Error "❌ installer\win directory not found"
              exit 1
          }
          
          # 方案：将文件复制到 installer\win 目录以确保 NSIS 能找到
          Write-Host "Copying files to installer\win directory..."
          Copy-Item "oadin.exe" "installer\win\" -Force
          if (Test-Path "oadin-tray.exe") {
              Copy-Item "oadin-tray.exe" "installer\win\" -Force
              Write-Host "✅ oadin-tray.exe copied to installer\win"
          } else {
              Write-Host "⚠️ oadin-tray.exe not found, skipping copy"
          }
          
          # 验证文件复制成功
          Write-Host "Files in installer\win directory:"
          Get-ChildItem "installer\win\" -Name "*.exe" | ForEach-Object { Write-Host "  $_" }

          # —— 在调用 NSIS 前，强制把脚本改成纯 ANSI 并清除不可见字符 ——
          $nsisPath = "installer\win\oadin.nsi"
          $content  = Get-Content $nsisPath -Raw
          $content  = $content -replace '^\uFEFF','' -replace '\u00A0',' ' -replace '\u200B|\u200C|\u200D','' -replace '\u202A|\u202B|\u202C|\u202D|\u202E',''
          [System.IO.File]::WriteAllText($nsisPath, $content, [System.Text.Encoding]::GetEncoding(1252))

          
          # 进入 installer\win 目录运行 NSIS
          Push-Location "installer\win"
          Write-Host "Running NSIS from: $(Get-Location)"
          
          makensis.exe -DVERSION=$env:CI_COMMIT_TAG oadin.nsi
          $nsisExitCode = $LASTEXITCODE
          
          if ($nsisExitCode -ne 0) {
              Write-Error "❌ NSIS build failed with exit code: $nsisExitCode"
              Pop-Location
              exit 1
          }
          
          # 验证安装包是否在当前目录生成
          if (Test-Path "oadin-installer.exe") {
              Write-Host "✅ oadin-installer.exe found in installer\win"
              # 移动到根目录
              Move-Item "oadin-installer.exe" "..\..\oadin-installer.exe" -Force
              Pop-Location
          } else {
              Write-Error "❌ oadin-installer.exe not found in installer\win"
              Pop-Location
              exit 1
          }
          
          # 验证安装包是否成功移动到根目录
          if (-not (Test-Path "oadin-installer.exe")) { 
              Write-Error "❌ oadin-installer.exe not found in root directory" 
              exit 1 
          }
          Write-Host "✅ oadin-installer.exe created successfully in root directory"
          
          signtool sign /f C:\Users\Administrator\Desktop\u.cer /tr http://timestamp.digicert.com /td sha256 /fd sha256 /csp "eToken Base Cryptographic Provider" /k "[{{$($WIN_SIGN_PASSWORD)}}]=p11#942acfc7f5754f2e" "oadin-installer.exe"
          echo "--------- 📁 移动到待上传文件夹 ----------"
          New-Item -ItemType Directory -Path "upload" -Force
          Move-Item -Path "oadin-installer.exe" -Destination "upload\$($env:WIN_FILE_NAME)" -Force
          echo "========== 🔧 Win Build End =========="
      - name: upload nexus
        if: startsWith(github.ref_name, 'test')
        run: |
          echo "========== 🔧 Win Upload Begin =========="
          echo "-------- 📤 上传到 Nexus 私服 --------"
          cd C:\Users\Administrator\WebstormProjects\oadin
          curl.exe -v -u "$($env:NEXUS_USERNAME):$($env:NEXUS_PASSWORD)" --upload-file "upload/$($env:WIN_FILE_NAME)" "http://$($env:NEXUS_HOST_PORT)/repository/raw-hosted/intel-ai-pc/oadin/releases/win/$($env:WIN_FILE_NAME)"
          curl.exe -v -u "$($env:NEXUS_USERNAME):$($env:NEXUS_PASSWORD)" --upload-file "upload/$($env:WIN_FILE_NAME)" "http://$($env:NEXUS_HOST_PORT)/repository/raw-hosted/intel-ai-pc/oadin/releases/win/oadin-installer-latest.exe"
          echo "--------- 🧹 环境清理 ----------"
          git reset --hard
          git clean -fd
          echo "--------- 🗑️ 删除本地tag ----------"
          git checkout main
          git tag -d $env:CI_COMMIT_TAG
          echo "========== 🔧 Win Upload End =========="
      - name: upload oss
        if: ${{ !startsWith(github.ref_name, 'test') }}
        run: |
          echo "========== 🔧 Win Upload Begin =========="
          echo "-------- 📤 上传到 阿里云 OSS --------"
          cd C:\Users\Administrator\WebstormProjects\oadin
          ossutil cp "upload/$($env:WIN_FILE_NAME)" "oss://smartvision-aipc/oadin/releases/windows/$($env:WIN_FILE_NAME)" --force
          ossutil cp "upload/$($env:WIN_FILE_NAME)" "oss://smartvision-aipc/oadin/releases/windows/oadin-installer-latest.exe" --force
          echo "--------- 🧹 环境清理 ----------"
          git reset --hard
          git clean -fd
          echo "--------- 🗑️ 删除本地tag ----------"
          git checkout main
          git tag -d $env:CI_COMMIT_TAG
          echo "--------- ♻️ 刷新CND ----------"
          aliyun cdn RefreshObjectCaches --ObjectPath "https://oss-aipc.dcclouds.com/oadin/releases/windows/oadin-installer-latest.exe" --ObjectType File
          echo "========== 🔧 Win Upload End =========="

      - name: Notify Feishu
        shell: powershell
        run: |
            $uri = "${{ secrets.NOTIFY_SECRET }}"
            $tag = "${{ github.ref_name }}"
            
            # 判断环境和下载路径
            if ($tag -like "test*") {
              $envType = "测试环境"
              $macUrl = "http://${{ env.NEXUS_HOST_PORT }}/repository/raw-hosted/intel-ai-pc/oadin/releases/mac/${{ env.MAC_FILE_NAME }}"
              $winUrl = "http://${{ env.NEXUS_HOST_PORT }}/repository/raw-hosted/intel-ai-pc/oadin/releases/win/${{ env.WIN_FILE_NAME }}"
            } else {
              $envType = "生产环境"
              $macUrl = "https://oss-aipc.dcclouds.com/oadin/releases/macos/${{ env.MAC_FILE_NAME }}"
              $winUrl = "https://oss-aipc.dcclouds.com/oadin/releases/windows/${{ env.WIN_FILE_NAME }}"
            }
            $bodyObj = @{
              msg_type = 'post'
              content = @{
                post = @{
                  zh_cn = @{
                    title = "🎉 [$envType] 安装包上传成功"
                    content = @(
                      @(
                        @{ tag = "at"; user_id = "a37571869425831e1d434f333a9ca2ba34eaae8b" },
                        @{ tag = "text"; text = "OADIN 构建已完成！" }
                      ),
                      @(
                        @{ tag = "text"; text = "环境: " },
                        @{ tag = "text"; text = "$envType"; bold = $true }
                      ),
                      @(
                        @{ tag = "text"; text = "Tag: " },
                        @{ tag = "text"; text = "$tag"; bold = $true }
                      ),
                      @(
                        @{ tag = "text"; text = "Mac下载: " },
                        @{ tag = "a"; href = "$macUrl"; text = "点击下载" }
                      ),
                      @(
                        @{ tag = "text"; text = "Win下载: " },
                        @{ tag = "a"; href = "$winUrl"; text = "点击下载" }
                      ),
                      @(
                        @{ tag = "text"; text = "⏰ 时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" }
                      )
                    )
                  }
                }
              }
            }
            $json = $bodyObj | ConvertTo-Json -Depth 10
            $utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($false)
            $body = $utf8NoBomEncoding.GetBytes($json)
            Invoke-RestMethod -Uri $uri -Method Post -ContentType "application/json; charset=utf-8" -Body $body